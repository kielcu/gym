<?php declare(strict_types=1);
/**
 * Created by PhpStorm.
 * User: Lukasz
 * Date: 2019-04-05
 * Time: 18:17
 */

namespace Test\App\Http\Controllers;

use App\Models\Exercise;
use App\Models\Muscle;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ExerciseControllerTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Muscle::query()->create(['name' => 'first']);
        Muscle::query()->create(['name' => 'second']);
        Muscle::query()->create(['name' => 'third']);
    }

    public function testCreate()
    {
        $response = $this->get(route('exercise.create'));

        $response->assertStatus(200);

        $response->assertSee('name');
        $response->assertSee('muscles');
        $response->assertSee('submit');
    }

    public function testStore_success()
    {
        $response = $this->post(route('exercise.store'), [
            'name' => 'test',
            'muscles' => [1,2]
        ]);

        $response->assertStatus(302);
        $response->assertRedirect(route('exercise.index'));
    }

    public function testStore_failed()
    {
        $response = $this->post(route('exercise.store'), [
            'name' => '',
            'muscles' => [1,2]
        ]);

        $response->assertStatus(302);
        $response->assertRedirect(route('exercise.create'));
        $response->assertSessionHasErrors();
    }


    public function testEdit()
    {
        $exercise = Exercise::create(['name' => 'test']);
        $response = $this->get(route('exercise.edit', $exercise->id));

        $response->assertStatus(200);

        $response->assertSee($exercise->name);
        $response->assertSee('submit');
    }

    public function testUpdate_success()
    {
        $exercise = Exercise::create(['name' => 'test']);
        $response = $this->put(route('exercise.update', $exercise->id), [
            'name' => 'test2',
            'muscles' => [1,2]
        ]);

        $response->assertStatus(302);
        $response->assertRedirect(route('exercise.index'));
    }

    public function testUpdate_filed()
    {
        $exercise = Exercise::create(['name' => 'test']);
        $response = $this->put(route('exercise.update', $exercise->id), [
            'name' => '',
            'muscles' => [1,2]
        ]);

        $response->assertStatus(302);
        $response->assertRedirect(route('exercise.edit', $exercise->id));
        $response->assertSessionHasErrors();
    }

    public function testShow()
    {
        $exercise = Exercise::create(['name' => 'test']);
        $response = $this->get(route('exercise.edit', $exercise->id));
        $response->assertStatus(200);
    }

    public function testDestroy()
    {
        $exercise = Exercise::create(['name' => 'test']);
        $response = $this->delete(route('exercise.destroy', $exercise->id), [
        ]);

        $response->assertStatus(302);
        $response->assertRedirect(route('exercise.index'));
    }
}
